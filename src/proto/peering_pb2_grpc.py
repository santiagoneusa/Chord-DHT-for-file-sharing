# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import peering_pb2 as peering__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in peering_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PeeringServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecieveFile = channel.unary_unary(
                '/peering.PeeringService/RecieveFile',
                request_serializer=peering__pb2.RecieveFileRequest.SerializeToString,
                response_deserializer=peering__pb2.RecieveFileResponse.FromString,
                _registered_method=True)
        self.SendFile = channel.unary_unary(
                '/peering.PeeringService/SendFile',
                request_serializer=peering__pb2.SendFileRequest.SerializeToString,
                response_deserializer=peering__pb2.SendFileResponse.FromString,
                _registered_method=True)
        self.PeersByZone = channel.unary_unary(
                '/peering.PeeringService/PeersByZone',
                request_serializer=peering__pb2.PeersByZoneRequest.SerializeToString,
                response_deserializer=peering__pb2.PeersByZoneResponse.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/peering.PeeringService/Register',
                request_serializer=peering__pb2.RegisterRequest.SerializeToString,
                response_deserializer=peering__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Unregister = channel.unary_unary(
                '/peering.PeeringService/Unregister',
                request_serializer=peering__pb2.UnregisterRequest.SerializeToString,
                response_deserializer=peering__pb2.UnregisterResponse.FromString,
                _registered_method=True)


class PeeringServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecieveFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PeersByZone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PeeringServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecieveFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RecieveFile,
                    request_deserializer=peering__pb2.RecieveFileRequest.FromString,
                    response_serializer=peering__pb2.RecieveFileResponse.SerializeToString,
            ),
            'SendFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=peering__pb2.SendFileRequest.FromString,
                    response_serializer=peering__pb2.SendFileResponse.SerializeToString,
            ),
            'PeersByZone': grpc.unary_unary_rpc_method_handler(
                    servicer.PeersByZone,
                    request_deserializer=peering__pb2.PeersByZoneRequest.FromString,
                    response_serializer=peering__pb2.PeersByZoneResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=peering__pb2.RegisterRequest.FromString,
                    response_serializer=peering__pb2.RegisterResponse.SerializeToString,
            ),
            'Unregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Unregister,
                    request_deserializer=peering__pb2.UnregisterRequest.FromString,
                    response_serializer=peering__pb2.UnregisterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'peering.PeeringService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('peering.PeeringService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PeeringService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecieveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/peering.PeeringService/RecieveFile',
            peering__pb2.RecieveFileRequest.SerializeToString,
            peering__pb2.RecieveFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/peering.PeeringService/SendFile',
            peering__pb2.SendFileRequest.SerializeToString,
            peering__pb2.SendFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PeersByZone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/peering.PeeringService/PeersByZone',
            peering__pb2.PeersByZoneRequest.SerializeToString,
            peering__pb2.PeersByZoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/peering.PeeringService/Register',
            peering__pb2.RegisterRequest.SerializeToString,
            peering__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/peering.PeeringService/Unregister',
            peering__pb2.UnregisterRequest.SerializeToString,
            peering__pb2.UnregisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
